type: edu
files:
- name: test/Tests.kt
  visible: false
  text: |-
    package com.h0tk3y.spbsu.kotlin.course.lesson1

    import org.junit.Assert
    import org.junit.Test

    class TestB {
        private fun doTest(expected: Int, n: Int, first: Int? = null, second: Int? = null) {
            val actual = when {
                first == null -> fibonacci(n)
                second == null -> fibonacci(n, first)
                else -> fibonacci(n, first, second)
            }
            Assert.assertEquals(
                "fibonacci(${listOfNotNull(n, first, second).joinToString()}) should be $expected, but was $actual",
                expected,
                actual
            )
        }

        @Test
        fun testFibonacci() {
            doTest(-1, 0)
            doTest(-1, 0, 1)
            doTest(-1, 0, 1, 1)

            doTest(-1, -1)
            doTest(-1, -1, 1)
            doTest(-1, -1, 1, 1)

            doTest(1, 1)
            doTest(5, 1, 5)
            doTest(10, 1, 10, 20)

            doTest(13, 7)
            doTest(65, 7, 5)
            doTest(210, 7, 10, 20)

            doTest(46368, 24)
            doTest(231840, 24, 5)
            doTest(750250, 24, 10, 20)
        }
    }
  learner_created: false
- name: src/Task2B.kt
  visible: true
  placeholders:
  - offset: 62
    length: 28
    placeholder_text: /* добавьте три параметра */
    initial_state:
      length: 28
      offset: 62
    initialized_from_dependency: false
    possible_answer: 'n: Int, first: Int = 1, second: Int = first'
    selected: false
    status: Unchecked
  - offset: 99
    length: 725
    placeholder_text: |-
      /*
       * Реализуйте функцию fibonacci, вычисляющую элемент последовательности Фибоначчи по номеру.
       * Нумерация элементов с единицы.
       * Функция должна иметь три целочисленных параметра:
       * 1. n – номер требуемого элемента последовательности. Для номеров, меньших единицы, возвращайте -1;
       * 2. first – значение первого элемента последовательности, имеет значение по умолчанию 1;
       * 3. second – значение второго элемента последовательности, использует first как значение по умолчанию
       * Целочисленное переполнение игнорируйте.
       *
       * Функцию должно быть можно вызывать следующими способами:
       * `fibonacci(42)`
       * `fibonacci(7, 1)`
       * `fibonacci(11, 0, 1)`
       * `fibonacci(7, first = 5)`
       * `fibonacci(42, first = 1, second = 1)`
       */
    initial_state:
      length: 725
      offset: 99
    initialized_from_dependency: false
    possible_answer: |2-
          when {
              n < 1 -> -1
              n == 1 -> first
              n == 2 -> second
              else -> {
                  var prev = first
                  var cur = second
                  for (i in 3..n) {
                      val next = prev + cur
                      prev = cur
                      cur = next
                  }
                  cur
              }
          }
    selected: false
    status: Unchecked
  text: |-
    package com.h0tk3y.spbsu.kotlin.course.lesson1

    fun fibonacci(/* добавьте три параметра */): Int =
    /*
     * Реализуйте функцию fibonacci, вычисляющую элемент последовательности Фибоначчи по номеру.
     * Нумерация элементов с единицы.
     * Функция должна иметь три целочисленных параметра:
     * 1. n – номер требуемого элемента последовательности. Для номеров, меньших единицы, возвращайте -1;
     * 2. first – значение первого элемента последовательности, имеет значение по умолчанию 1;
     * 3. second – значение второго элемента последовательности, использует first как значение по умолчанию
     * Целочисленное переполнение игнорируйте.
     *
     * Функцию должно быть можно вызывать следующими способами:
     * `fibonacci(42)`
     * `fibonacci(7, 1)`
     * `fibonacci(11, 0, 1)`
     * `fibonacci(7, first = 5)`
     * `fibonacci(42, first = 1, second = 1)`
     */
  learner_created: false
status: Unchecked
record: -1
